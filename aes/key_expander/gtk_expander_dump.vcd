$date
	Mon Nov 27 22:17:30 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module expander_tb $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 128 " inStream [127:0] $end
$var wire 4 # roundNumber [3:0] $end
$var wire 8 $ rcon [7:0] $end
$var wire 8 % outputSub [7:0] $end
$var reg 8 & inputSub [7:0] $end
$var reg 128 ' outStream [127:0] $end
$var reg 3 ( state [2:0] $end
$var reg 32 ) temp [31:0] $end
$var integer 32 * i [31:0] $end
$scope module rcon_table $end
$var wire 1 ! clk $end
$var wire 4 + roundNumber [3:0] $end
$var reg 8 , rcon [7:0] $end
$upscope $end
$scope module sub_table $end
$var wire 1 ! clk $end
$var wire 8 - inByte [7:0] $end
$var reg 8 . subByte [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx .
bx -
b1 ,
b0 +
bx *
bx )
b111 (
bx '
bx &
bx %
b1 $
b0 #
b11011011111000001010000001001001000101010111000000001101001100100101111110100000110111000100000000011101110100100111101001010 "
0!
$end
#5
b0 (
b100 *
1!
#10
0!
#15
b1 (
b10111010010011110100101000000011 )
1!
#20
0!
#25
b1111011 %
b1111011 .
b11 &
b11 -
b0 *
1!
#26
b11010110 %
b11010110 .
b1001010 &
b1001010 -
b1 *
b10111010010011110100101001111011 )
#27
b10000100 %
b10000100 .
b1001111 &
b1001111 -
b10 *
b10111010010011111101011001111011 )
#28
b11110100 %
b11110100 .
b10111010 &
b10111010 -
b11 *
b10111010100001001101011001111011 )
#29
b10 (
b100 *
b11110100100001001101011001111011 )
#30
0!
#35
b110 (
1!
#40
0!
#45
b111 (
b11101110111110001100001001110010110011000101011011000011110101001000011110100010110110000101110010000100000110001001011100010110 '
1!
#50
b10 $
b10 ,
0!
b11101110111110001100001001110010110011000101011011000011110101001000011110100010110110000101110010000100000110001001011100010110 "
b1 #
b1 +
#55
b0 (
b100 *
1!
#60
0!
#65
b1 (
b11000100101110001011010000100 )
1!
#70
0!
#75
b1011111 %
b1011111 .
b10000100 &
b10000100 -
b0 *
1!
#76
b1000111 %
b1000111 .
b10110 &
b10110 -
b1 *
b11000100101110001011001011111 )
#77
b10001000 %
b10001000 .
b10010111 &
b10010111 -
b10 *
b11000100101110100011101011111 )
#78
b10101101 %
b10101101 .
b11000 &
b11000 -
b11 *
b11000100010000100011101011111 )
#79
b10 (
b100 *
b10101101100010000100011101011111 )
#80
0!
#85
b110 (
1!
#90
0!
#95
b111 (
b1000001011100001000010100101101100011010010011001000110111110010000101010000100100111101010010110001110100111000000100110110011 '
1!
#100
b100 $
b100 ,
0!
b1000001011100001000010100101101100011010010011001000110111110010000101010000100100111101010010110001110100111000000100110110011 "
b10 #
b10 +
#105
b0 (
b100 *
1!
#110
0!
#115
b1 (
b10011100000010011011001110001110 )
1!
#120
0!
#125
b11001 %
b11001 .
b10001110 &
b10001110 -
b0 *
1!
#126
b1101101 %
b1101101 .
b10110011 &
b10110011 -
b1 *
b10011100000010011011001100011001 )
#127
b1 %
b1 .
b1001 &
b1001 -
b10 *
b10011100000010010110110100011001 )
#128
b11011110 %
b11011110 .
b10011100 &
b10011100 -
b11 *
b10011100000000010110110100011001 )
#129
b10 (
b100 *
b11011110000000010110110100011001 )
#130
0!
#135
b110 (
1!
#140
0!
#145
b111 (
b10011011011100011110100000110100000101100101011110101110110011010001110011010011001100000110100010010010010011110011100111011011 '
1!
#150
b1000 $
b1000 ,
0!
b10011011011100011110100000110100000101100101011110101110110011010001110011010011001100000110100010010010010011110011100111011011 "
b11 #
b11 +
#155
b0 (
b100 *
1!
#160
0!
#165
b1 (
b1001111001110011101101110010010 )
1!
#170
0!
#175
b1001111 %
b1001111 .
b10010010 &
b10010010 -
b0 *
1!
#176
b10111001 %
b10111001 .
b11011011 &
b11011011 -
b1 *
b1001111001110011101101101001111 )
#177
b10010 %
b10010 .
b111001 &
b111001 -
b10 *
b1001111001110011011100101001111 )
#178
b10000100 %
b10000100 .
b1001111 &
b1001111 -
b11 *
b1001111000100101011100101001111 )
#179
b10 (
b100 *
b10000100000100101011100101001111 )
#180
0!
#185
b110 (
1!
#190
0!
#195
b111 (
b10111011000110101000101111011000000010011010011111111101101100001110111100111110011111101111010001111101010001111011000000101 '
1!
#200
0!
